-- Version 0.6.0.0 (r107) ----

* Added a missing lock to AppHelper::QueueDelayed.
* Made the custom NSWindowController ctor obsolete (use loadNibNamed_owner instead).
* Don't special case the return type for mutableCopyWithZone (it's usually the declaring
   type, but not always).
* NSBitmapImageRep init methods (and any others with the same name) now return
   their declaring type instead of NSObject.
* Added externs for NSDeviceRGBColorSpace, NSDeviceResolution, NSWhite, etc.
* Replaced the NSData bytes, getBytes, getBytes_length, and getBytes_range methods
   with versions that use byte[] instead of IntPtr.
* Added NSData.Create(byte[]) overload.
* Added NSString and string versions of operator+.
* Added init methods for NSMutableAttributedString.
* Added init and static string creation methods for NSMutableString.
* NSError.Raise throws OperationCanceledException instead of InvalidOperationException 
   if the cocoa exception is Cocoa3Domain and NSUserCancelledError.
* Made NSPoint, NSSize, NSRect, and NSRange IFormattable.
* Extern NSString objects are now lazily created.
* Debug dumpObjects method now dumps stack traces (if they are enabled).
* Documented the threading semantics of types and methods using a new
   ThreadModelAttribute (which the next version of gendarme will recognize).
* NSFileManager is safe to use from multiple threads in Leopard if you create multiple 
   instances so defaultManager now asserts that it is called from the main thread and 
   the type is now decorated as ThreadModel.SingleThread.
* Added xml documentation.
* Reworked examples so that they are built just like user apps.
* Added an icon to the AnimatingViews example.
* Replaced natty example with a cooler and better written infinite precision Mandelbrot app.

-- Version 0.5.0.0 (r73) ----

* Fixed the SetFrontProcess code which (sometimes) crashed horribly on intel.
* Added NSMutableArray.Create methods.
* Added NSRange, NSPoint, NSSize, and NSRect ToString overloads which
support culture invariant round tripping. Also added Parse methods.
* Added NSPoint.Distance.
* Added NSSize.Area.
* Added NSRect.Left, Right, Bottom, Top, Contains, Intersects, Intersect,
   and Union.
* NSArray, NSIndexSet, NSDictionary, and NSString implement System.Collections.Generic.IEnumerable.
* Made some NSDocumentController methods return NSDocument instead of NSObject.
* Replaced the NSString operator== and != string overloads with an Equals
  overload to avoid ambiguities with null.
* Added NSShowAnimationEffect functions.
* Added NSNib.NSNibOwner and NSNibTopLevelObjects constants.
* Added NSPasteboard and NSDocumentType externs.
* make install creates the /usr/local directories if they don't exist.

-- Version 0.4.0.0 (r46) ----

* Methods with native NSError ** arguments are now generated using out NSError
  instead of IntPtr. Ditto for NSRange ** and NSStringEncoding **.
* Generated code uses NSString instead of System.String.
* Generated method names use underscores instead of case changes (e.g.
   initWithDomain_code_userInfo instead of initWithDomainCodeUserInfo).
* Generated classes now define Retain instead of retain so that exported classes can 
   define their own Retain methods (to support covaraint returns) without causing the 
   Registrar to think that those types are overriding retain. 
* Generated classes now have Alloc instead of alloc methods (so the API is more 
   consistent).
* Added an overload of NSApplication::Create to make it easier for clients to
  extend the Debug menu.
* Added some Create overloads to make mcocoa easier to use with apps which have 
   custom NSApplication subclasses.
* Added a custom NSWindowController to make custom controllers easier to create.
* Added alert and path functions.
* Added a bunch more Enums and Externs.
* Fixed some leaks where HGlobals were not being freed.
* Added usage notes to the README.

-- Version 0.3.0.0 (r34) ----

* 85% of foundation methods and 77% of appkit methods now use a fast path
  which is between 5x and 7x faster than the old code.
* If a native argument is something like "int*" or "NSString**" the generated
  code will now use "out int" or "out string" instead of IntPtr.
* NSString.ToString returns null instead of string.Empty if the NSString is nil.
* Fixed some generated methods to return something more sensible than NSObject:
  localizedScannerWithString, scannerWithString, dictionary, dictionaryWithObject:forKey:, etc
* Added .NET style enumeration support to NSArray and NSDictionary.
* Fixed a bug in the typedef parser which caused the generator to think unichar
  was an unsigned int instead of an unsigned short.
* Use Trace.Assert instead of DBC.
* Improved the Natty example app:
     - The environment dialog now shows the default values (if any) set within the make file.
     - Added a Restore Defaults button to environment dialog.
     - Add some blank environment variables so users can add new ones that we couldn't pull out
       of the make file.
     - Current target, editor, ignored targets, and environment variables are saved in a pref.
     - Added a pref panel to allow editor and ignored targets to be set.
     - Natty comments in make files are no longer used.
     - When opening a file pop up an alert on failure instead of exiting the app.
     - Cleaned up the Makefile parser by using NSScanner.
     - Targets popup filters out a zillion internal targets generated by automake.
     - Can now clear the transcript window with command-K.

-- Version 0.2.0.0 (r20) ----

* Complete rewrite: instead of the experimental hand-coded wrappers
  we now generate wrappers based on Apple's headers.
* Methods which call directly into native code are now lower case.