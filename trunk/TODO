https://home.comcast.net/~jesse98/public/mcocoa_docs/namespaces.html

set a symbolic breakpoint at -[NSException raise]

http://developer.apple.com/techpubs/macosx/Cocoa/ProgrammingTopics/JavaBridge/JavaBridge.html

NSURL is now the canonical way to refer to a file
bookmarks replace aliases (and support custom metadata)
might want to look into adding a helper for gcd, might need to add special code to support blocks
OpenCL (easy gpu programming)
http://elevate.codeplex.com/ (doesn't have anything monorocks doesnt have?)
monorocks	svn co http://anonsvn.mono-project.com/source/trunk/rocks/

* Should be a way to make stuff like NSDate IComparable.
* Try to generate function pointer methods. Might want to use:
	- http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/RubyPythonCocoa/Articles/GenerateFrameworkMetadata.html
* Try to generate block methods.
* Stagger windows in examples.
* Get mandel-zoomer doing a bit better with gendarme.
* Generate externs:
	- identify them all (name and file)
	- create a little native app to evaluate them
	- use the output of the native file to generate an Externs.cs file
	- add comments to identify the original file
* Probably should handle properties somehow.
* Generate structs? Preprocessor might cause problems with this. 
* Ditto with fields.
* Would be nice to enable CLSCompliant. One problem is that a lot of cocoa
   methods use unsigned typed. Perhaps we can fix this by generating signed
   overloads and decorating the original versions with CLSCompliant.
* Can use the below to get info about objective-c libraries:
	- http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/RubyPythonCocoa/Articles/GenerateFrameworkMetadata.html
	- but I don't think this would give us info about deprecated methods
* Might want a white list for out arguments (can't tell from the headers if they
  are supposed to be arrays or not, see NSBezierPath.getLineDashCountPhase)
* Might want an option to emit deprecated methods.
* Might want a make target to generate an assembly for every apple obj-c framework.
* It would be really nice if the generator preprocessed the source files. That would
   allow us to generate assemblies for earlier versions of the framework, reduce the
   chance for emitting stuff we shouldn't, and clean up the grammar.
* Probably should add interfaces for protocols.
* Release checklist:
	- update-libraries
	- search for TODO (everywhere)
	- run gendarme
	- make sure unit tests work
	- make sure examples work in debug
	- make sure an example works when launched via the finder
	- make sure examples work in release
	- review tar target
	- make sure everything is checked in
	- use svn log -r 1:HEAD > CHANGE_LOG
	- update CHANGES file
	- update version number
	- sync example version numbers with the lib
	- remove build_num file 
	- update libraries
	- install
	- upload new html docs
	- update README and wiki
	- delete the example bin directories
	- delete the generated code?
	- make distclean && make dist
	- upload a new version to googlecode
	- send an announcement
	- make sure everything is checked in
