<!-- See the quartz-chart example for details on generating wrappers for other frameworks. -->
<Generate>
	<Framework name = "foundation" path = "/System/Library/Frameworks/Foundation.framework/Versions/Current/Headers">
		<Blacklist>
			<!-- TODO: should hand write some equivalents for at least some of these -->
			<Method interface = "NSArray" method = "arrayWithObjects:" reason = "because it is variadic"/>	<!-- reason is arbitrary text included in a generated comment --> 
			<Method interface = "NSArray" method = "initWithObjects:" reason = "because it is variadic"/>
			<Method interface = "NSArray" method = "sortedArrayUsingFunction:context:" reason = "because it has a function pointer"/>
			<Method interface = "NSArray" method = "sortedArrayUsingFunction:context:hint:" reason = "because it has a function pointer"/>
			
			<Method interface = "NSAssertionHandler" method = "handleFailureInMethod:object:file:lineNumber:description:" reason = "because it is variadic"/>
			<Method interface = "NSAssertionHandler" method = "handleFailureInFunction:file:lineNumber:description:" reason = "because it is variadic"/>
			
			<Method interface = "NSCoder" method = "encodeValuesOfObjCTypes:" reason = "because it is variadic"/>
			<Method interface = "NSCoder" method = "decodeValuesOfObjCTypes:" reason = "because it is variadic"/>
			
			<Method interface = "NSData" method = "bytes" reason = "because there is a hand-written version"/>
			<Method interface = "NSData" method = "getBytes:" reason = "because there is a hand-written version"/>
			<Method interface = "NSData" method = "getBytes:length:" reason = "because there is a hand-written version"/>
			<Method interface = "NSData" method = "getBytes:range:" reason = "because there is a hand-written version"/>

			<Method interface = "NSDictionary" method = "dictionaryWithObjectsAndKeys:" reason = "because it is variadic"/>
			<Method interface = "NSDictionary" method = "initWithObjectsAndKeys:" reason = "because it is variadic"/>
			
			<Method interface = "NSException" method = "raise:format:" reason = "because it is variadic"/>
			
			<Method interface = "NSFileManager" method = "defaultManager" reason = "because we assert that the current thread is the main thread"/>
			
			<Method interface = "NSMutableArray" method = "sortUsingFunction:context:" reason = "because it has a function pointer"/>
			
			<Method interface = "NSMutableString" method = "appendFormat:" reason = "because it is variadic"/>
			
			<Method interface = "NSPredicate" method = "predicateWithFormat:" reason = "because it is variadic"/>
			
			<Method interface = "NSSet" method = "setWithObjects:" reason = "because it is variadic"/>
			<Method interface = "NSSet" method = "initWithObjects:" reason = "because it is variadic"/>
			
			<Method interface = "NSString" method = "initWithFormat:" reason = "because it is variadic"/>
			<Method interface = "NSString" method = "initWithFormat:locale:" reason = "because it is variadic"/>
			<Method interface = "NSString" method = "initWithCharactersNoCopy:length:freeWhenDone:" reason = "because the characters need to be copied"/>
			<Method interface = "NSString" method = "getCharacters:" reason = "because there is a hand-written version"/>
			<Method interface = "NSString" method = "getCharacters:range:" reason = "because there is a hand-written version"/>
			<Method interface = "NSString" method = "localizedStringWithFormat:" reason = "because it is variadic"/>
			<Method interface = "NSString" method = "stringByAppendingFormat:" reason = "because it is variadic"/>
			<Method interface = "NSString" method = "stringWithFormat:" reason = "because it is variadic"/>
		</Blacklist>
		
		<!-- See http://developer.apple.com/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html -->
		<Threading>
			<Type name = "NSArray" model = "concurrent"/>
			<Type name = "NSNotification" model = "concurrent"/>
			<Type name = "NSAssertionHandler" model = "concurrent"/>
			<Type name = "NSNotificationCenter" model = "concurrent"/>
			<Type name = "NSAttributedString" model = "concurrent"/>
			<Type name = "NSNumber" model = "concurrent"/>
			<Type name = "NSCalendarDate" model = "concurrent"/>
			<Type name = "NSObject" model = "concurrent"/>
			<Type name = "NSCharacterSet" model = "concurrent"/>
			<Type name = "NSPortCoder" model = "concurrent"/>
			<Type name = "NSConditionLock" model = "concurrent"/>
			<Type name = "NSPortMessage" model = "concurrent"/>
			<Type name = "NSConnection" model = "concurrent"/>
			<Type name = "NSPortNameServer" model = "concurrent"/>
			<Type name = "NSData" model = "concurrent"/>
			<Type name = "NSProtocolChecker" model = "concurrent"/>
			<Type name = "NSDate" model = "concurrent"/>
			<Type name = "NSProxy" model = "concurrent"/>
			<Type name = "NSRecursiveLock" model = "concurrent"/>
			<Type name = "NSDecimalNumber" model = "concurrent"/>
			<Type name = "NSSet" model = "concurrent"/>
			<Type name = "NSDecimalNumberHandler" model = "concurrent"/>
			<Type name = "NSString" model = "concurrent"/>
			<Type name = "NSDeserializer" model = "concurrent"/>
			<Type name = "NSThread" model = "concurrent"/>
			<Type name = "NSDictionary" model = "concurrent"/>
			<Type name = "NSTimeZone" model = "concurrent"/>
			<Type name = "NSDistantObject" model = "concurrent"/>
			<Type name = "NSTimer" model = "concurrent"/>
			<Type name = "NSDistributedLock" model = "concurrent"/>
			<Type name = "NSUserDefaults" model = "concurrent"/>
			<Type name = "NSDistributedNotificationCenter" model = "concurrent"/>
			<Type name = "NSValue" model = "concurrent"/>
			<Type name = "NSMethodSignature" model = "concurrent"/>
			
			<!-- Apple lists this as thread unsafe but they also require you to create and use
			one in threads so it seems like it just can't be used concurrently. -->
			<Type name = "NSAutoreleasePool" model = "single"/>
			
			<!-- This is thread safe in Leopard if you explicitly create an instance (and we now
			have an assert to ensure that it's used this way). See 
			http://www.omnigroup.com/mailman/archive/macosx-dev/2008-June/061392.html. -->
			<Type name = "NSFileManager" model = "single"/>
			
			<!-- These are presumably safe to use from one thread at a time. -->
			<Type name = "NSMutableData" model = "serializable"/>
			<Type name = "NSMutableDictionary" model = "serializable"/>
			<Type name = "NSMutableSet" model = "serializable"/>
			<Type name = "NSMutableString" model = "serializable"/>
			<Type name = "NSFileHandle" model = "serializable"/>
			<Type name = "NSMutableArray" model = "serializable"/>
			
			<!-- These are explicitly mentioned as thread unsafe. -->
			<Type name = "NSAppleScript" model = "main"/>
			<Type name = "NSMutableAttributedString" model = "main"/>
			<Type name = "NSArchiver" model = "main"/>
			<Type name = "NSMutableCharacterSet" model = "main"/>
			<Type name = "NSBundle" model = "main"/>
			<Type name = "NSCoder" model = "main"/>
			<Type name = "NSCountedSet" model = "main"/>
			<Type name = "NSDateFormatter" model = "main"/>
			<Type name = "NSNotificationQueue" model = "main"/>
			<Type name = "NSEnumerator" model = "main"/>
			<Type name = "NSNumberFormatter" model = "main"/>
			<Type name = "NSPipe" model = "main"/>
			<Type name = "NSPort" model = "main"/>
			<Type name = "NSFormatter" model = "main"/>
			<Type name = "NSProcessInfo" model = "main"/>
			<Type name = "NSRunLoop" model = "main"/>
			<Type name = "NSHost" model = "main"/>
			<Type name = "NSScanner" model = "main"/>
			<Type name = "NSInvocation" model = "main"/>
			<Type name = "NSSerializer" model = "main"/>
			<Type name = "NSTask" model = "main"/>
			<Type name = "NSUnarchiver" model = "main"/>
			<Type name = "NSUndoManager" model = "main"/>
		</Threading>
	</Framework>
	
	<Framework name = "appkit" path = "/System/Library/Frameworks/AppKit.framework/Versions/Current/Headers">
		<Blacklist>
			<Method interface = "NSApplication" method = "sharedApplication" reason = "because we want to label it as multi-threaded"/>
			<Method interface = "NSApplication" method = "run" reason = "because there is a hand-written version"/>
			<Method interface = "NSApplication" method = "windows" reason = "because there is a hand-written version"/>
			<Method interface = "NSBezierPath" method = "appendBezierPathWithPoints:count:" reason = "because there is a hand-written version"/>
			<Method interface = "NSView" method = "subviews" reason = "because there is a hand-written version"/>
			<Method interface = "NSView" method = "setSubviews:" reason = "because there is a hand-written version"/>
			
			<Method interface = "NSAlert" method = "alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:" reason = "because it is variadic"/>
			<Method interface = "NSGradient" method = "initWithColorsAndLocations:" reason = "because it is variadic"/>
			<Method interface = "NSMatrix" method = "sortUsingFunction:context:" reason = "because it has a function pointer"/>
			<Method interface = "NSView" method = "sortSubviewsUsingFunction:context:" reason = "because it has a function pointer"/>
		</Blacklist>
		
		<!-- See http://developer.apple.com/documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html -->
		<Threading>
			<Type name = "NSAffineTransform" model = "serializable"/>
			<Type name = "NSBezierPath" model = "serializable"/>
			<Type name = "NSColor" model = "serializable"/>
			<Type name = "NSGradient" model = "serializable"/>
			<Type name = "NSGraphicsContext" model = "serializable"/>
			<Type name = "NSImage" model = "serializable"/>
			<Type name = "NSView" model = "concurrent"/>		<!-- except create, destroy, resize, move, and "other" operations -->
			<Type name = "NSWindow" model = "serializable"/>
			
			<!-- These are not listed as thread safe but they are base classes of thread safe classes... -->
			<Type name = "NSResponder" model = "concurrent"/>
		</Threading>
	</Framework>
	
	<!-- A lot of Cocoa methods are typed to return an id which is really annoying. To make these methods more
	pleasant to deal with you can add their names here and the generator will type them with either the specified
	type or the interface type. -->
	<TypeResults>
		<TypeResult name = "alphanumericCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "array" type = "NSArray"/>
		<TypeResult name = "arrayWithCapacity:"/>
		<TypeResult name = "arrayWithObject:"/>
		<TypeResult name = "arrayWithObjects:count:"/>
		<TypeResult name = "arrayWithArray:"/>
		<TypeResult name = "arrayWithContentsOfFile:"/>
		<TypeResult name = "arrayWithContentsOfURL:"/>
		<TypeResult name = "calendarDate" type = "NSCalendarDate"/>
		<TypeResult name = "capitalizedLetterCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "characterSetWithBitmapRepresentation:" type = "NSCharacterSet"/>
		<TypeResult name = "characterSetWithCharactersInString:" type = "NSCharacterSet"/>
		<TypeResult name = "characterSetWithContentsOfFile:" type = "NSCharacterSet"/>
		<TypeResult name = "characterSetWithRange:" type = "NSCharacterSet"/>
		<TypeResult name = "contentView" type = "NSView"/>			<!-- usually this is a NSClipView, but sometimes it is just an NSView -->
		<TypeResult name = "controlCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "currentCalendar" type = "NSCalendar"/>
		<TypeResult name = "currentDocument" type = "NSDocument"/>
		<TypeResult name = "currentLocale" type = "NSLocale"/>
		<TypeResult name = "date" type = "NSDate"/>
		<TypeResult name = "dateWithString:calendarFormat:" type = "NSCalendarDate"/>
		<TypeResult name = "dateWithString:calendarFormat:locale:" type = "NSCalendarDate"/>
		<TypeResult name = "dateWithTimeIntervalSinceNow:" type = "NSDate"/>
		<TypeResult name = "dateWithTimeIntervalSinceReferenceDate:" type = "NSDate"/>
		<TypeResult name = "dateWithTimeIntervalSince1970:" type = "NSDate"/>
		<TypeResult name = "dateWithYear:month:day:hour:minute:second:timeZone:" type = "NSCalendarDate"/>
		<TypeResult name = "decomposableCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "decimalDigitCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "defaultCenter" type = "NSNotificationCenter"/>
		<TypeResult name = "dictionary"/>
		<TypeResult name = "dictionaryWithObject:forKey:"/>
		<TypeResult name = "dictionaryWithObjects:forKeys:count:"/>
		<TypeResult name = "dictionaryWithDictionary:"/>
		<TypeResult name = "dictionaryWithObjects:forKeys:"/>
		<TypeResult name = "dictionaryWithContentsOfFile:"/>
		<TypeResult name = "dictionaryWithContentsOfURL:"/>
		<TypeResult name = "dictionaryWithCapacity:"/>
		<TypeResult name = "distantFuture" type = "NSDate"/>
		<TypeResult name = "distantPast" type = "NSDate"/>
		<TypeResult name = "document" type = "NSDocument"/>
		<TypeResult name = "documentForURL:" type = "NSDocument"/>
		<TypeResult name = "documentForWindow:" type = "NSDocument"/>
		<TypeResult name = "documentView" type = "NSView"/>
		<TypeResult name = "imageNamed:" type = "NSImage"/>
		<TypeResult name = "fileHandleForReadingAtPath:" type = "NSFileHandle"/>
		<TypeResult name = "fileHandleForUpdatingAtPath:" type = "NSFileHandle"/>
		<TypeResult name = "fileHandleForWritingAtPath:" type = "NSFileHandle"/>
		<TypeResult name = "fileHandleWithNullDevice" type = "NSFileHandle"/>
		<TypeResult name = "fileHandleWithStandardError" type = "NSFileHandle"/>
		<TypeResult name = "fileHandleWithStandardInput" type = "NSFileHandle"/>
		<TypeResult name = "fileHandleWithStandardOutput" type = "NSFileHandle"/>
		<TypeResult name = "fileURLWithPath:"/>
		<TypeResult name = "fileURLWithPath:isDirectory:"/>
		<TypeResult name = "illegalCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "indexSet"/>
		<TypeResult name = "indexSetWithIndex:"/>
		<TypeResult name = "indexSetWithIndexesInRange:"/>
		<TypeResult name = "invertedSet" type = "NSCharacterSet"/>
		<TypeResult name = "letterCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "localizedScannerWithString:"/>
		<TypeResult name = "lowercaseLetterCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "makeDocumentForURL:withContentsOfURL:ofType:error:" type = "NSDocument"/>
		<TypeResult name = "makeDocumentWithContentsOfURL:ofType:error:" type = "NSDocument"/>
		<TypeResult name = "makeUntitledDocumentOfType:error:" type = "NSDocument"/>
		<TypeResult name = "mutableCopyWithZone:"/>
		<TypeResult name = "newlineCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "nonBaseCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "notificationWithName:object:" type = "NSNotification"/>
		<TypeResult name = "notificationWithName:object:userInfo:" type = "NSNotification"/>
		<TypeResult name = "openDocumentWithContentsOfURL:display:error:" type = "NSDocument"/>
		<TypeResult name = "openUntitledDocumentAndDisplay:error:" type = "NSDocument"/>
		<TypeResult name = "pipe" type = "NSPipe"/>
		<TypeResult name = "punctuationCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "scannerWithString:"/>
		<TypeResult name = "sharedDocumentController"/>
		<TypeResult name = "sharedUserDefaultsController"/>
		<TypeResult name = "string" type = "NSString"/>
		<TypeResult name = "stringWithString:"/>
		<TypeResult name = "stringWithCapacity:"/>
		<TypeResult name = "stringWithCharacters:length:"/>
		<TypeResult name = "stringWithUTF8String:"/>
		<TypeResult name = "stringWithCString:encoding:"/>
		<TypeResult name = "stringWithContentsOfFile:encoding:error:"/>
		<TypeResult name = "stringWithContentsOfFile:usedEncoding:error:"/>
		<TypeResult name = "stringWithContentsOfURL:encoding:error:"/>
		<TypeResult name = "stringWithContentsOfURL:usedEncoding:error:"/>
		<TypeResult name = "symbolCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "systemLocale" type = "NSLocale"/>
		<TypeResult name = "uppercaseLetterCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "URLWithString:"/>
		<TypeResult name = "URLWithString:relativeToURL:"/>
		<TypeResult name = "whitespaceAndNewlineCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "whitespaceCharacterSet" type = "NSCharacterSet"/>
		<TypeResult name = "windowController" type = "NSWindowController"/>
	</TypeResults>
</Generate>
